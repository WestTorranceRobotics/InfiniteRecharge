// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc5124.robot2020.subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.Solenoid;




public class ControlPanelInterface extends Subsystem {

    private Solenoid deploySolenoid;
    private PWMVictorSPX panelRotatorSpeedController;
    private Encoder quadratureEncoder;
    // private PIDController rotatePanelPIDController;

    public ControlPanelInterface() {
        deploySolenoid = new Solenoid(0, 2);
        addChild("Deploy Solenoid",deploySolenoid);

            
        panelRotatorSpeedController = new PWMVictorSPX(11);
        addChild("Panel Rotator Speed Controller",panelRotatorSpeedController);
        panelRotatorSpeedController.setInverted(false);
            
        quadratureEncoder = new Encoder(10, 11, false, EncodingType.k4X);
        addChild("Quadrature Encoder",quadratureEncoder);
        quadratureEncoder.setDistancePerPulse(1.0);
        // quadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
       /*     
        rotatePanelPIDController = new PIDController(1.0, 0.0, 0.0, 0.0, quadratureEncoder, panelRotatorSpeedController, 0.02);
        addChild("Rotate Panel PID Controller",rotatePanelPIDController);
        rotatePanelPIDController.setContinuous(false);
        rotatePanelPIDController.setAbsoluteTolerance(0.2);

        rotatePanelPIDController.setOutputRange(-1.0, 1.0);
        */
    }

    @Override
    public void initDefaultCommand() {
            // Set the default command for a subsystem here.
            // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
            // Put code here to be run every loop

    }

    
}

