// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.smartdashboard.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMTalonSRX wheelSpeedController;
private Encoder quadratureEncoder2;
private PIDController wheelPIDController;
private PWMVictorSPX speedController;
private Encoder quadratureEncoder;
private PIDController turretPIDController;
private DigitalInput photoelectricBallDetectorDigitalInput;
private Solenoid gateKeeperSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
wheelSpeedController = new PWMTalonSRX(6);
addChild("Wheel Speed Controller",wheelSpeedController);
wheelSpeedController.setInverted(false);
        
quadratureEncoder2 = new Encoder(0, 1, false, EncodingType.k4X);
addChild("Quadrature Encoder 2",quadratureEncoder2);
quadratureEncoder2.setDistancePerPulse(1.0);
quadratureEncoder2.setPIDSourceType(PIDSourceType.kRate);
        
wheelPIDController = new PIDController(1.0, 0.0, 0.0, 0.0, quadratureEncoder2, wheelSpeedController, 0.02);
addChild("Wheel PID Controller",wheelPIDController);
wheelPIDController.setContinuous(false);
wheelPIDController.setAbsoluteTolerance(0.2);

wheelPIDController.setOutputRange(-1.0, 1.0);
        
speedController = new PWMVictorSPX(7);
addChild("Speed Controller",speedController);
speedController.setInverted(false);
        
quadratureEncoder = new Encoder(3, 4, false, EncodingType.k4X);
addChild("Quadrature Encoder",quadratureEncoder);
quadratureEncoder.setDistancePerPulse(1.0);
quadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
        
turretPIDController = new PIDController(1.0, 0.0, 0.0, 0.0, quadratureEncoder, speedController, 0.02);
addChild("Turret PID Controller",turretPIDController);
turretPIDController.setContinuous(false);
turretPIDController.setAbsoluteTolerance(0.2);

turretPIDController.setOutputRange(-1.0, 1.0);
        
photoelectricBallDetectorDigitalInput = new DigitalInput(6);
addChild("Photoelectric Ball Detector Digital Input",photoelectricBallDetectorDigitalInput);

        
gateKeeperSolenoid = new Solenoid(0, 0);
addChild("GateKeeper Solenoid",gateKeeperSolenoid);

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

